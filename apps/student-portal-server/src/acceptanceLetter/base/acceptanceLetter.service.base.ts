/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AcceptanceLetter as PrismaAcceptanceLetter,
  Student as PrismaStudent,
} from "@prisma/client";

export class AcceptanceLetterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AcceptanceLetterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.acceptanceLetter.count(args);
  }

  async acceptanceLetters<T extends Prisma.AcceptanceLetterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcceptanceLetterFindManyArgs>
  ): Promise<PrismaAcceptanceLetter[]> {
    return this.prisma.acceptanceLetter.findMany<Prisma.AcceptanceLetterFindManyArgs>(
      args
    );
  }
  async acceptanceLetter<T extends Prisma.AcceptanceLetterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcceptanceLetterFindUniqueArgs>
  ): Promise<PrismaAcceptanceLetter | null> {
    return this.prisma.acceptanceLetter.findUnique(args);
  }
  async createAcceptanceLetter<T extends Prisma.AcceptanceLetterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcceptanceLetterCreateArgs>
  ): Promise<PrismaAcceptanceLetter> {
    return this.prisma.acceptanceLetter.create<T>(args);
  }
  async updateAcceptanceLetter<T extends Prisma.AcceptanceLetterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcceptanceLetterUpdateArgs>
  ): Promise<PrismaAcceptanceLetter> {
    return this.prisma.acceptanceLetter.update<T>(args);
  }
  async deleteAcceptanceLetter<T extends Prisma.AcceptanceLetterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcceptanceLetterDeleteArgs>
  ): Promise<PrismaAcceptanceLetter> {
    return this.prisma.acceptanceLetter.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.acceptanceLetter
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
