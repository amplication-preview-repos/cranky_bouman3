/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AcceptanceLetter } from "./AcceptanceLetter";
import { AcceptanceLetterCountArgs } from "./AcceptanceLetterCountArgs";
import { AcceptanceLetterFindManyArgs } from "./AcceptanceLetterFindManyArgs";
import { AcceptanceLetterFindUniqueArgs } from "./AcceptanceLetterFindUniqueArgs";
import { CreateAcceptanceLetterArgs } from "./CreateAcceptanceLetterArgs";
import { UpdateAcceptanceLetterArgs } from "./UpdateAcceptanceLetterArgs";
import { DeleteAcceptanceLetterArgs } from "./DeleteAcceptanceLetterArgs";
import { Student } from "../../student/base/Student";
import { AcceptanceLetterService } from "../acceptanceLetter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AcceptanceLetter)
export class AcceptanceLetterResolverBase {
  constructor(
    protected readonly service: AcceptanceLetterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "read",
    possession: "any",
  })
  async _acceptanceLettersMeta(
    @graphql.Args() args: AcceptanceLetterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AcceptanceLetter])
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "read",
    possession: "any",
  })
  async acceptanceLetters(
    @graphql.Args() args: AcceptanceLetterFindManyArgs
  ): Promise<AcceptanceLetter[]> {
    return this.service.acceptanceLetters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AcceptanceLetter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "read",
    possession: "own",
  })
  async acceptanceLetter(
    @graphql.Args() args: AcceptanceLetterFindUniqueArgs
  ): Promise<AcceptanceLetter | null> {
    const result = await this.service.acceptanceLetter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AcceptanceLetter)
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "create",
    possession: "any",
  })
  async createAcceptanceLetter(
    @graphql.Args() args: CreateAcceptanceLetterArgs
  ): Promise<AcceptanceLetter> {
    return await this.service.createAcceptanceLetter({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AcceptanceLetter)
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "update",
    possession: "any",
  })
  async updateAcceptanceLetter(
    @graphql.Args() args: UpdateAcceptanceLetterArgs
  ): Promise<AcceptanceLetter | null> {
    try {
      return await this.service.updateAcceptanceLetter({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AcceptanceLetter)
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "delete",
    possession: "any",
  })
  async deleteAcceptanceLetter(
    @graphql.Args() args: DeleteAcceptanceLetterArgs
  ): Promise<AcceptanceLetter | null> {
    try {
      return await this.service.deleteAcceptanceLetter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: AcceptanceLetter
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
