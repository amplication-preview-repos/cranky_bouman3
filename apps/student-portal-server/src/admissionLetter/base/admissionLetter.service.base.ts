/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdmissionLetter as PrismaAdmissionLetter,
  Student as PrismaStudent,
} from "@prisma/client";

export class AdmissionLetterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdmissionLetterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.admissionLetter.count(args);
  }

  async admissionLetters<T extends Prisma.AdmissionLetterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdmissionLetterFindManyArgs>
  ): Promise<PrismaAdmissionLetter[]> {
    return this.prisma.admissionLetter.findMany<Prisma.AdmissionLetterFindManyArgs>(
      args
    );
  }
  async admissionLetter<T extends Prisma.AdmissionLetterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdmissionLetterFindUniqueArgs>
  ): Promise<PrismaAdmissionLetter | null> {
    return this.prisma.admissionLetter.findUnique(args);
  }
  async createAdmissionLetter<T extends Prisma.AdmissionLetterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdmissionLetterCreateArgs>
  ): Promise<PrismaAdmissionLetter> {
    return this.prisma.admissionLetter.create<T>(args);
  }
  async updateAdmissionLetter<T extends Prisma.AdmissionLetterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdmissionLetterUpdateArgs>
  ): Promise<PrismaAdmissionLetter> {
    return this.prisma.admissionLetter.update<T>(args);
  }
  async deleteAdmissionLetter<T extends Prisma.AdmissionLetterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdmissionLetterDeleteArgs>
  ): Promise<PrismaAdmissionLetter> {
    return this.prisma.admissionLetter.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.admissionLetter
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
