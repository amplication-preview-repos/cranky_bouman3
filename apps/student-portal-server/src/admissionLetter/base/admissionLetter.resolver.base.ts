/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AdmissionLetter } from "./AdmissionLetter";
import { AdmissionLetterCountArgs } from "./AdmissionLetterCountArgs";
import { AdmissionLetterFindManyArgs } from "./AdmissionLetterFindManyArgs";
import { AdmissionLetterFindUniqueArgs } from "./AdmissionLetterFindUniqueArgs";
import { CreateAdmissionLetterArgs } from "./CreateAdmissionLetterArgs";
import { UpdateAdmissionLetterArgs } from "./UpdateAdmissionLetterArgs";
import { DeleteAdmissionLetterArgs } from "./DeleteAdmissionLetterArgs";
import { Student } from "../../student/base/Student";
import { AdmissionLetterService } from "../admissionLetter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdmissionLetter)
export class AdmissionLetterResolverBase {
  constructor(
    protected readonly service: AdmissionLetterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "read",
    possession: "any",
  })
  async _admissionLettersMeta(
    @graphql.Args() args: AdmissionLetterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdmissionLetter])
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "read",
    possession: "any",
  })
  async admissionLetters(
    @graphql.Args() args: AdmissionLetterFindManyArgs
  ): Promise<AdmissionLetter[]> {
    return this.service.admissionLetters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdmissionLetter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "read",
    possession: "own",
  })
  async admissionLetter(
    @graphql.Args() args: AdmissionLetterFindUniqueArgs
  ): Promise<AdmissionLetter | null> {
    const result = await this.service.admissionLetter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionLetter)
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "create",
    possession: "any",
  })
  async createAdmissionLetter(
    @graphql.Args() args: CreateAdmissionLetterArgs
  ): Promise<AdmissionLetter> {
    return await this.service.createAdmissionLetter({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionLetter)
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "update",
    possession: "any",
  })
  async updateAdmissionLetter(
    @graphql.Args() args: UpdateAdmissionLetterArgs
  ): Promise<AdmissionLetter | null> {
    try {
      return await this.service.updateAdmissionLetter({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdmissionLetter)
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "delete",
    possession: "any",
  })
  async deleteAdmissionLetter(
    @graphql.Args() args: DeleteAdmissionLetterArgs
  ): Promise<AdmissionLetter | null> {
    try {
      return await this.service.deleteAdmissionLetter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: AdmissionLetter
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
