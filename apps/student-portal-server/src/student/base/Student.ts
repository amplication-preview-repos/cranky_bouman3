/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AcceptanceLetter } from "../../acceptanceLetter/base/AcceptanceLetter";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { AdmissionLetter } from "../../admissionLetter/base/AdmissionLetter";
import { Payment } from "../../payment/base/Payment";
import { EnumStudentPaymentStatus } from "./EnumStudentPaymentStatus";
import { Timetable } from "../../timetable/base/Timetable";

@ObjectType()
class Student {
  @ApiProperty({
    required: false,
    type: () => [AcceptanceLetter],
  })
  @ValidateNested()
  @Type(() => AcceptanceLetter)
  @IsOptional()
  acceptanceLetters?: Array<AcceptanceLetter>;

  @ApiProperty({
    required: false,
    type: () => [AdmissionLetter],
  })
  @ValidateNested()
  @Type(() => AdmissionLetter)
  @IsOptional()
  admissionLetters?: Array<AdmissionLetter>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    enum: EnumStudentPaymentStatus,
  })
  @IsEnum(EnumStudentPaymentStatus)
  @IsOptional()
  @Field(() => EnumStudentPaymentStatus, {
    nullable: true,
  })
  paymentStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => [Timetable],
  })
  @ValidateNested()
  @Type(() => Timetable)
  @IsOptional()
  timetables?: Array<Timetable>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Student as Student };
