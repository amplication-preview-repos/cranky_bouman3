/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StudentService } from "../student.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StudentCreateInput } from "./StudentCreateInput";
import { Student } from "./Student";
import { StudentFindManyArgs } from "./StudentFindManyArgs";
import { StudentWhereUniqueInput } from "./StudentWhereUniqueInput";
import { StudentUpdateInput } from "./StudentUpdateInput";
import { AcceptanceLetterFindManyArgs } from "../../acceptanceLetter/base/AcceptanceLetterFindManyArgs";
import { AcceptanceLetter } from "../../acceptanceLetter/base/AcceptanceLetter";
import { AcceptanceLetterWhereUniqueInput } from "../../acceptanceLetter/base/AcceptanceLetterWhereUniqueInput";
import { AdmissionLetterFindManyArgs } from "../../admissionLetter/base/AdmissionLetterFindManyArgs";
import { AdmissionLetter } from "../../admissionLetter/base/AdmissionLetter";
import { AdmissionLetterWhereUniqueInput } from "../../admissionLetter/base/AdmissionLetterWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { TimetableFindManyArgs } from "../../timetable/base/TimetableFindManyArgs";
import { Timetable } from "../../timetable/base/Timetable";
import { TimetableWhereUniqueInput } from "../../timetable/base/TimetableWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StudentControllerBase {
  constructor(
    protected readonly service: StudentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Student })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStudent(
    @common.Body() data: StudentCreateInput
  ): Promise<Student> {
    return await this.service.createStudent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        password: true,
        paymentStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Student] })
  @ApiNestedQuery(StudentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async students(@common.Req() request: Request): Promise<Student[]> {
    const args = plainToClass(StudentFindManyArgs, request.query);
    return this.service.students({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        password: true,
        paymentStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async student(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    const result = await this.service.student({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        password: true,
        paymentStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStudent(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() data: StudentUpdateInput
  ): Promise<Student | null> {
    try {
      return await this.service.updateStudent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          password: true,
          paymentStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStudent(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    try {
      return await this.service.deleteStudent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          password: true,
          paymentStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/acceptanceLetters")
  @ApiNestedQuery(AcceptanceLetterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AcceptanceLetter",
    action: "read",
    possession: "any",
  })
  async findAcceptanceLetters(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<AcceptanceLetter[]> {
    const query = plainToClass(AcceptanceLetterFindManyArgs, request.query);
    const results = await this.service.findAcceptanceLetters(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/acceptanceLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectAcceptanceLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AcceptanceLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      acceptanceLetters: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/acceptanceLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateAcceptanceLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AcceptanceLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      acceptanceLetters: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/acceptanceLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectAcceptanceLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AcceptanceLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      acceptanceLetters: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/admissionLetters")
  @ApiNestedQuery(AdmissionLetterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AdmissionLetter",
    action: "read",
    possession: "any",
  })
  async findAdmissionLetters(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<AdmissionLetter[]> {
    const query = plainToClass(AdmissionLetterFindManyArgs, request.query);
    const results = await this.service.findAdmissionLetters(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/admissionLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectAdmissionLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AdmissionLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admissionLetters: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/admissionLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateAdmissionLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AdmissionLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admissionLetters: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/admissionLetters")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectAdmissionLetters(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AdmissionLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admissionLetters: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/timetables")
  @ApiNestedQuery(TimetableFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Timetable",
    action: "read",
    possession: "any",
  })
  async findTimetables(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Timetable[]> {
    const query = plainToClass(TimetableFindManyArgs, request.query);
    const results = await this.service.findTimetables(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timetables")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectTimetables(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: TimetableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timetables: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timetables")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateTimetables(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: TimetableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timetables: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timetables")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectTimetables(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: TimetableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timetables: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
